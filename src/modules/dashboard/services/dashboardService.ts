import { supabase } from '../../../shared/services/api/supabaseClient';
import revenueService from '../../ke-khai/services/revenueService';

export interface UserDashboardData {
  totalDeclarations: number;
  pendingPaymentDeclarations: number;
  completedDeclarations: number;
  processingDeclarations: number;
  totalParticipants: number;
  totalRevenue: number;
  monthlyRevenue: number;
  commission: number;
  recentActivities: ActivityItem[];
  personalizedTasks: TaskItem[];
  declarationsByStatus: {
    draft: number;
    submitted: number;
    processing: number;
    pending_payment: number;
    paid: number;
    completed: number;
    rejected: number;
  };
}

export interface TaskItem {
  id: number;
  title: string;
  priority: 'high' | 'medium' | 'low';
  dueDate: string;
  completed: boolean;
}

export interface ActivityItem {
  id: number;
  title: string;
  description: string;
  time: string;
  icon: 'calendar' | 'users' | 'file' | 'tag' | 'file-text' | 'search' | 'check-circle' | 'database' | 'credit-card' | 'edit' | 'file-check' | 'x-circle' | 'alert-triangle' | 'user-plus' | 'server' | 'trending-up';
}

class DashboardService {
  // L·∫•y d·ªØ li·ªáu dashboard cho nh√¢n vi√™n thu
  async getUserDashboardData(userId: string): Promise<UserDashboardData> {
    try {
      console.log('üìä Getting dashboard data for user:', userId);

      // Validate user ID
      if (!userId || userId.trim().length === 0) {
        throw new Error('Invalid user ID provided');
      }

      // Fetch declarations data
      const { data: declarations, error: declarationsError } = await supabase
        .from('danh_sach_ke_khai')
        .select(`
          id,
          ma_ke_khai,
          ten_ke_khai,
          trang_thai,
          created_at,
          updated_at,
          danh_sach_nguoi_tham_gia (
            id,
            ho_ten,
            tien_dong_thuc_te,
            tien_dong
          )
        `)
        .eq('created_by', userId)
        .order('created_at', { ascending: false });

      if (declarationsError) {
        console.error('Error fetching declarations:', declarationsError);
        throw declarationsError;
      }

      // Calculate statistics
      const stats = this.calculateUserStats(declarations || []);

      // Get revenue data
      const revenueData = await revenueService.getRevenueOverview(userId);
      const commissionData = await revenueService.getCommissionData(userId);

      // Generate recent activities and personalized tasks
      const recentActivities = this.generateRecentActivities(declarations || []);
      const personalizedTasks = this.generatePersonalizedTasks(declarations || [], stats);

      return {
        totalDeclarations: stats.totalDeclarations,
        pendingPaymentDeclarations: stats.declarationsByStatus.pending_payment,
        completedDeclarations: stats.declarationsByStatus.completed + stats.declarationsByStatus.paid,
        processingDeclarations: stats.declarationsByStatus.processing,
        totalParticipants: stats.totalParticipants,
        totalRevenue: revenueData.totalRevenue,
        monthlyRevenue: revenueData.monthlyRevenue,
        commission: commissionData.totalCommission,
        recentActivities,
        personalizedTasks,
        declarationsByStatus: stats.declarationsByStatus
      };

    } catch (error) {
      console.error('Error in getUserDashboardData:', error);
      throw error;
    }
  }

  // T√≠nh to√°n th·ªëng k√™ t·ª´ d·ªØ li·ªáu k√™ khai
  private calculateUserStats(declarations: any[]) {
    const stats = {
      totalDeclarations: declarations.length,
      totalParticipants: 0,
      declarationsByStatus: {
        draft: 0,
        submitted: 0,
        processing: 0,
        pending_payment: 0,
        paid: 0,
        completed: 0,
        rejected: 0
      }
    };

    declarations.forEach(declaration => {
      // Count by status
      const status = declaration.trang_thai;
      if (stats.declarationsByStatus.hasOwnProperty(status)) {
        stats.declarationsByStatus[status]++;
      }

      // Count participants
      if (declaration.danh_sach_nguoi_tham_gia && Array.isArray(declaration.danh_sach_nguoi_tham_gia)) {
        stats.totalParticipants += declaration.danh_sach_nguoi_tham_gia.length;
      }
    });

    return stats;
  }

  // T·∫°o danh s√°ch ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y t·ª´ d·ªØ li·ªáu k√™ khai
  private generateRecentActivities(declarations: any[]): ActivityItem[] {
    const activities: ActivityItem[] = [];
    
    // Sort declarations by updated_at or created_at
    const sortedDeclarations = declarations
      .sort((a, b) => {
        const dateA = new Date(a.updated_at || a.created_at);
        const dateB = new Date(b.updated_at || b.created_at);
        return dateB.getTime() - dateA.getTime();
      })
      .slice(0, 5); // Take only the 5 most recent

    sortedDeclarations.forEach((declaration, index) => {
      const participantCount = declaration.danh_sach_nguoi_tham_gia?.length || 0;
      const timeAgo = this.getTimeAgo(declaration.updated_at || declaration.created_at);
      
      let title = '';
      let description = '';
      let icon: ActivityItem['icon'] = 'file-text';

      switch (declaration.trang_thai) {
        case 'draft':
          title = 'T·∫°o k√™ khai m·ªõi';
          description = `K√™ khai ${declaration.ma_ke_khai} v·ªõi ${participantCount} ng∆∞·ªùi tham gia`;
          icon = 'edit';
          break;
        case 'submitted':
          title = 'N·ªôp k√™ khai';
          description = `ƒê√£ n·ªôp k√™ khai ${declaration.ma_ke_khai} ch·ªù duy·ªát`;
          icon = 'file-check';
          break;
        case 'processing':
          title = 'K√™ khai ƒëang x·ª≠ l√Ω';
          description = `K√™ khai ${declaration.ma_ke_khai} ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω`;
          icon = 'database';
          break;
        case 'pending_payment':
          title = 'Ch·ªù thanh to√°n';
          description = `K√™ khai ${declaration.ma_ke_khai} ƒë√£ ƒë∆∞·ª£c duy·ªát, ch·ªù thanh to√°n`;
          icon = 'credit-card';
          break;
        case 'paid':
          title = 'ƒê√£ thanh to√°n';
          description = `Ho√†n th√†nh thanh to√°n cho k√™ khai ${declaration.ma_ke_khai}`;
          icon = 'check-circle';
          break;
        case 'completed':
          title = 'Ho√†n th√†nh k√™ khai';
          description = `K√™ khai ${declaration.ma_ke_khai} ƒë√£ ho√†n th√†nh th√†nh c√¥ng`;
          icon = 'check-circle';
          break;
        case 'rejected':
          title = 'K√™ khai b·ªã t·ª´ ch·ªëi';
          description = `K√™ khai ${declaration.ma_ke_khai} c·∫ßn ch·ªânh s·ª≠a`;
          icon = 'x-circle';
          break;
        default:
          title = 'C·∫≠p nh·∫≠t k√™ khai';
          description = `K√™ khai ${declaration.ma_ke_khai}`;
          icon = 'file-text';
      }

      activities.push({
        id: declaration.id,
        title,
        description,
        time: timeAgo,
        icon
      });
    });

    return activities;
  }

  // T·∫°o danh s√°ch c√¥ng vi·ªác c√° nh√¢n h√≥a d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø
  private generatePersonalizedTasks(declarations: any[], stats: any): TaskItem[] {
    const tasks: TaskItem[] = [];
    let taskId = 1;

    // Task cho k√™ khai ch·ªù thanh to√°n
    if (stats.declarationsByStatus.pending_payment > 0) {
      tasks.push({
        id: taskId++,
        title: `Ho√†n th√†nh thanh to√°n cho ${stats.declarationsByStatus.pending_payment} k√™ khai`,
        priority: 'high',
        dueDate: 'H√¥m nay',
        completed: false
      });
    }

    // Task cho k√™ khai ƒëang x·ª≠ l√Ω
    if (stats.declarationsByStatus.processing > 0) {
      tasks.push({
        id: taskId++,
        title: `Theo d√µi ${stats.declarationsByStatus.processing} k√™ khai ƒëang x·ª≠ l√Ω`,
        priority: 'medium',
        dueDate: 'Trong tu·∫ßn',
        completed: false
      });
    }

    // Task cho k√™ khai nh√°p
    if (stats.declarationsByStatus.draft > 0) {
      tasks.push({
        id: taskId++,
        title: `Ho√†n thi·ªán ${stats.declarationsByStatus.draft} k√™ khai nh√°p`,
        priority: 'medium',
        dueDate: 'Tu·∫ßn t·ªõi',
        completed: false
      });
    }

    // Task cho k√™ khai b·ªã t·ª´ ch·ªëi
    if (stats.declarationsByStatus.rejected > 0) {
      tasks.push({
        id: taskId++,
        title: `Ch·ªânh s·ª≠a ${stats.declarationsByStatus.rejected} k√™ khai b·ªã t·ª´ ch·ªëi`,
        priority: 'high',
        dueDate: 'Ng√†y mai',
        completed: false
      });
    }

    // Task chung cho vi·ªác chu·∫©n b·ªã k√™ khai th√°ng t·ªõi
    const now = new Date();
    const isEndOfMonth = now.getDate() > 20; // Sau ng√†y 20 c·ªßa th√°ng
    if (isEndOfMonth) {
      tasks.push({
        id: taskId++,
        title: 'Chu·∫©n b·ªã k√™ khai BHYT th√°ng t·ªõi',
        priority: 'low',
        dueDate: 'Cu·ªëi th√°ng',
        completed: false
      });
    }

    // Task ki·ªÉm tra doanh thu n·∫øu c√≥ doanh thu
    if (stats.totalDeclarations > 0) {
      tasks.push({
        id: taskId++,
        title: 'Xem b√°o c√°o doanh thu v√† hoa h·ªìng',
        priority: 'low',
        dueDate: 'Tu·∫ßn n√†y',
        completed: false
      });
    }

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng task hi·ªÉn th·ªã
    return tasks.slice(0, 4);
  }

  // Helper ƒë·ªÉ t√≠nh th·ªùi gian tr∆∞·ªõc ƒë√¢y
  private getTimeAgo(dateString: string): string {
    const date = new Date(dateString);
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));

    if (diffInMinutes < 1) return 'V·ª´a xong';
    if (diffInMinutes < 60) return `${diffInMinutes} ph√∫t tr∆∞·ªõc`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours} gi·ªù tr∆∞·ªõc`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays} ng√†y tr∆∞·ªõc`;
    
    const diffInWeeks = Math.floor(diffInDays / 7);
    if (diffInWeeks < 4) return `${diffInWeeks} tu·∫ßn tr∆∞·ªõc`;
    
    const diffInMonths = Math.floor(diffInDays / 30);
    return `${diffInMonths} th√°ng tr∆∞·ªõc`;
  }

  // Format currency for display
  formatCurrency(amount: number): string {
    if (amount >= 1000000000) {
      return `${(amount / 1000000000).toFixed(1)}B`;
    } else if (amount >= 1000000) {
      return `${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `${(amount / 1000).toFixed(0)}K`;
    } else {
      return amount.toString();
    }
  }

  // Validate user ID
  private validateUserId(userId: string): boolean {
    return userId && userId.trim().length > 0 && !isNaN(parseInt(userId));
  }
}

export default new DashboardService();
